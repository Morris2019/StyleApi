// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UrbanStyleApi.Models;

namespace UrbanStyleApi.Migrations
{
    [DbContext(typeof(urbanstyleContext))]
    [Migration("20211107185305_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Latin1_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("additional_notes");

                    b.Property<double>("AmountToPay")
                        .HasColumnType("float")
                        .HasColumnName("amount_to_pay");

                    b.Property<double?>("CouponDiscount")
                        .HasColumnType("float")
                        .HasColumnName("coupon_discount");

                    b.Property<long?>("CouponId")
                        .HasColumnType("bigint")
                        .HasColumnName("coupon_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_time");

                    b.Property<int?>("DealId")
                        .HasColumnType("int")
                        .HasColumnName("deal_id");

                    b.Property<double?>("DealQuantity")
                        .HasColumnType("float")
                        .HasColumnName("deal_quantity");

                    b.Property<double>("Discount")
                        .HasColumnType("float")
                        .HasColumnName("discount");

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("float")
                        .HasColumnName("discount_percent");

                    b.Property<double>("OriginalAmount")
                        .HasColumnType("float")
                        .HasColumnName("original_amount");

                    b.Property<string>("PaymentGateway")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("payment_gateway");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(27)
                        .HasColumnType("nvarchar(27)")
                        .HasColumnName("payment_status")
                        .HasDefaultValueSql("('pending')");

                    b.Property<string>("Source")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("source")
                        .HasDefaultValueSql("('pos')");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(33)
                        .HasColumnType("nvarchar(33)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('pending')");

                    b.Property<double?>("TaxAmount")
                        .HasColumnType("float")
                        .HasColumnName("tax_amount");

                    b.Property<string>("TaxName")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("tax_name");

                    b.Property<double?>("TaxPercent")
                        .HasColumnType("float")
                        .HasColumnName("tax_percent");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__bookings__3213E83E972A60F9")
                        .IsClustered(false);

                    b.HasIndex(new[] { "CouponId" }, "bookings_coupon_id_foreign");

                    b.HasIndex(new[] { "DealId" }, "bookings_deal_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "bookings_user_id_foreign");

                    b.ToTable("bookings");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.BookingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<int>("BusinessServiceId")
                        .HasColumnType("int")
                        .HasColumnName("business_service_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("unit_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PRIMARY")
                        .IsClustered(false);

                    b.HasIndex(new[] { "BookingId" }, "booking_items_booking_id_foreign");

                    b.HasIndex(new[] { "BusinessServiceId" }, "booking_items_business_service_id_foreign");

                    b.ToTable("booking_items");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.BookingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("day");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<int>("MaxBooking")
                        .HasColumnType("int")
                        .HasColumnName("max_booking");

                    b.Property<string>("MultipleBooking")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("multiple_booking")
                        .HasDefaultValueSql("('yes')");

                    b.Property<int>("SlotDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("slot_duration")
                        .HasDefaultValueSql("((30))");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('enabled')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__booking___3213E83EC60CAACC")
                        .IsClustered(false);

                    b.ToTable("booking_times");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.BookingUser", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("BookingId", "UserId")
                        .HasName("PK__booking___B67846C0B8DAC131")
                        .IsClustered(false);

                    b.HasIndex(new[] { "UserId" }, "booking_user_user_id_foreign");

                    b.ToTable("booking_user");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.BusinessService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("DefaultImage")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("default_image");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<double>("Discount")
                        .HasColumnType("float")
                        .HasColumnName("discount");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)")
                        .HasColumnName("discount_type");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("location_id")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<string>("Slug")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('active')");

                    b.Property<double>("Time")
                        .HasColumnType("float")
                        .HasColumnName("time");

                    b.Property<string>("TimeType")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("time_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__business__3213E83EEEC8C9E0")
                        .IsClustered(false);

                    b.HasIndex(new[] { "CategoryId" }, "business_services_category_id_foreign");

                    b.HasIndex(new[] { "LocationId" }, "business_services_location_id_foreign");

                    b.ToTable("business_services");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.BusinessServiceLocation", b =>
                {
                    b.Property<int>("BusinessServiceId")
                        .HasColumnType("int")
                        .HasColumnName("business_service_id");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.ToTable("business_service_location");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.BusinessServiceUser", b =>
                {
                    b.Property<int>("BusinessServiceId")
                        .HasColumnType("int")
                        .HasColumnName("business_service_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("BusinessServiceId", "UserId")
                        .HasName("PK__business__E3AB3AA1C8928BF2")
                        .IsClustered(false);

                    b.HasIndex(new[] { "UserId" }, "business_service_user_user_id_foreign");

                    b.ToTable("business_service_user");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Image")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("slug");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('active')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__categori__3213E83E4A614A43")
                        .IsClustered(false);

                    b.ToTable("categories");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.CompanySetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("BookingPerDay")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("booking_per_day");

                    b.Property<string>("BookingTimeType")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("booking_time_type");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("company_email");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("company_name");

                    b.Property<string>("CompanyPhone")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("company_phone");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("currency_id");

                    b.Property<string>("DateFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("date_format")
                        .HasDefaultValueSql("('Y-m-d')");

                    b.Property<string>("DisableSlot")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("disable_slot")
                        .HasDefaultValueSql("('disabled')");

                    b.Property<string>("EmployeeSelection")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("employee_selection")
                        .HasDefaultValueSql("('disabled')");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric(10,8)")
                        .HasColumnName("latitude");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("locale");

                    b.Property<string>("Logo")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("logo");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric(11,8)")
                        .HasColumnName("longitude");

                    b.Property<string>("MultiTaskUser")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("multi_task_user");

                    b.Property<string>("PurchaseCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("purchase_code");

                    b.Property<DateTime?>("SupportedUntil")
                        .HasColumnType("datetime2")
                        .HasColumnName("supported_until");

                    b.Property<string>("TimeFormat")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("time_format")
                        .HasDefaultValueSql("('h:i A')");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("timezone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("PK__company___3213E83E16E9A7A8")
                        .IsClustered(false);

                    b.HasIndex(new[] { "CurrencyId" }, "company_settings_currency_id_foreign");

                    b.ToTable("company_settings");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Coupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Days")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("days");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date_time");

                    b.Property<int>("MinimumPurchaseAmount")
                        .HasColumnType("int")
                        .HasColumnName("minimum_purchase_amount");

                    b.Property<int?>("Percent")
                        .HasColumnType("int")
                        .HasColumnName("percent");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('active')");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UsedTime")
                        .HasColumnType("int")
                        .HasColumnName("used_time");

                    b.Property<int?>("UsesLimit")
                        .HasColumnType("int")
                        .HasColumnName("uses_limit");

                    b.HasKey("Id")
                        .HasName("PK__coupons__3213E83E9F754F11")
                        .IsClustered(false);

                    b.ToTable("coupons");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.CouponUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CouponId")
                        .HasColumnType("bigint")
                        .HasColumnName("coupon_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__coupon_u__3213E83E7DD35A0F")
                        .IsClustered(false);

                    b.HasIndex(new[] { "CouponId" }, "coupon_users_coupon_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "coupon_users_user_id_foreign");

                    b.ToTable("coupon_users");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("currency_code");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("currency_name");

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("currency_symbol");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__currenci__3213E83EF3375CFC")
                        .IsClustered(false);

                    b.ToTable("currencies");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan?>("CloseTime")
                        .HasColumnType("time")
                        .HasColumnName("close_time");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Days")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("days");

                    b.Property<double?>("DealAmount")
                        .HasColumnType("float")
                        .HasColumnName("deal_amount");

                    b.Property<string>("DealAppliedOn")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("deal_applied_on");

                    b.Property<string>("DealType")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("deal_type");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("discount_type");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date_time");

                    b.Property<string>("Image")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("image");

                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("location_id");

                    b.Property<int?>("MaxOrderPerCustomer")
                        .HasColumnType("int")
                        .HasColumnName("max_order_per_customer");

                    b.Property<TimeSpan?>("OpenTime")
                        .HasColumnType("time")
                        .HasColumnName("open_time");

                    b.Property<double?>("OriginalAmount")
                        .HasColumnType("float")
                        .HasColumnName("original_amount");

                    b.Property<int?>("Percentage")
                        .HasColumnType("int")
                        .HasColumnName("percentage");

                    b.Property<string>("Slug")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("slug");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date_time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('active')");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UsedTime")
                        .HasColumnType("int")
                        .HasColumnName("used_time");

                    b.Property<int?>("UsesLimit")
                        .HasColumnType("int")
                        .HasColumnName("uses_limit");

                    b.HasKey("Id")
                        .HasName("PK__deals__3213E83E3F0B6360")
                        .IsClustered(false);

                    b.ToTable("deals");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.DealItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessServiceId")
                        .HasColumnType("int")
                        .HasColumnName("business_service_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("DealId")
                        .HasColumnType("int")
                        .HasColumnName("deal_id");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float")
                        .HasColumnName("discount_amount");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float")
                        .HasColumnName("total_amount");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("unit_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__deal_ite__3213E83E557E5464")
                        .IsClustered(false);

                    b.HasIndex(new[] { "BusinessServiceId" }, "deal_items_business_service_id_foreign");

                    b.HasIndex(new[] { "DealId" }, "deal_items_deal_id_foreign");

                    b.ToTable("deal_items");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.EmployeeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('active')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__employee__3213E83EFA5ADC56")
                        .IsClustered(false);

                    b.ToTable("employee_groups");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.EmployeeGroupService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessServiceId")
                        .HasColumnType("int")
                        .HasColumnName("business_service_id");

                    b.Property<int?>("EmployeeGroupsId")
                        .HasColumnType("int")
                        .HasColumnName("employee_groups_id");

                    b.HasKey("Id")
                        .HasName("PK__employee__3213E83EB54AD1A2")
                        .IsClustered(false);

                    b.HasIndex(new[] { "BusinessServiceId" }, "employee_group_services_business_service_id_foreign");

                    b.HasIndex(new[] { "EmployeeGroupsId" }, "employee_group_services_employee_groups_id_foreign");

                    b.ToTable("employee_group_services");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.FrontThemeSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomCss")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("custom_css");

                    b.Property<string>("Logo")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("logo");

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("primary_color");

                    b.Property<string>("SecondaryColor")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("secondary_color");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__front_th__3213E83E3B0D60EC")
                        .IsClustered(false);

                    b.ToTable("front_theme_settings");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("language_code");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("language_name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('disabled')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__language__3213E83ED26A3D8D")
                        .IsClustered(false);

                    b.ToTable("languages");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__location__3213E83E4FD1B606")
                        .IsClustered(false);

                    b.ToTable("locations");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.LtmTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("group");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("key");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("locale");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("PK__ltm_tran__3213E83E708A7EC3")
                        .IsClustered(false);

                    b.ToTable("ltm_translations");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Medium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("file_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__media__3213E83E600ED563")
                        .IsClustered(false);

                    b.ToTable("media");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Migration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Batch")
                        .HasColumnType("int")
                        .HasColumnName("batch");

                    b.Property<string>("Migration1")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("migration");

                    b.HasKey("Id")
                        .HasName("PK__migratio__3213E83EC5D0A8B3")
                        .IsClustered(false);

                    b.ToTable("migrations");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__modules__3213E83E431C2BF5")
                        .IsClustered(false);

                    b.ToTable("modules");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Page", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("slug");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__pages__3213E83E76F77390")
                        .IsClustered(false);

                    b.ToTable("pages");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.PasswordReset", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("email");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("token");

                    b.HasIndex(new[] { "Email" }, "password_resets_email_index");

                    b.ToTable("password_resets");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("currency_id");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("customer_id");

                    b.Property<string>("EventId")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("event_id");

                    b.Property<string>("Gateway")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("gateway");

                    b.Property<DateTime?>("PaidOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("paid_on");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(27)
                        .HasColumnType("nvarchar(27)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('pending')");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__payments__3213E83EB54D4966")
                        .IsClustered(false);

                    b.HasIndex(new[] { "BookingId" }, "payments_booking_id_foreign");

                    b.HasIndex(new[] { "EventId" }, "payments_event_id_unique")
                        .IsUnique()
                        .HasFilter("([event_id] IS NOT NULL)");

                    b.HasIndex(new[] { "TransactionId" }, "payments_transaction_id_unique")
                        .IsUnique()
                        .HasFilter("([transaction_id] IS NOT NULL)");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.PaymentGatewayCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("OfflinePayment")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("offline_payment")
                        .HasDefaultValueSql("('1')");

                    b.Property<string>("PaypalClientId")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("paypal_client_id");

                    b.Property<string>("PaypalMode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)")
                        .HasColumnName("paypal_mode")
                        .HasDefaultValueSql("('sandbox')");

                    b.Property<string>("PaypalSecret")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("paypal_secret");

                    b.Property<string>("PaypalStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("paypal_status")
                        .HasDefaultValueSql("('deactive')");

                    b.Property<string>("RazorpayKey")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("razorpay_key");

                    b.Property<string>("RazorpaySecret")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("razorpay_secret");

                    b.Property<string>("RazorpayStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("razorpay_status")
                        .HasDefaultValueSql("('deactive')");

                    b.Property<string>("ShowPaymentOptions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("show_payment_options")
                        .HasDefaultValueSql("('show')");

                    b.Property<string>("StripeClientId")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("stripe_client_id");

                    b.Property<string>("StripeSecret")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("stripe_secret");

                    b.Property<string>("StripeStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("stripe_status")
                        .HasDefaultValueSql("('deactive')");

                    b.Property<string>("StripeWebhookSecret")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("stripe_webhook_secret");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__payment___3213E83E5D9122A0")
                        .IsClustered(false);

                    b.ToTable("payment_gateway_credentials");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("display_name");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__permissi__3213E83E61B30204")
                        .IsClustered(false);

                    b.HasIndex(new[] { "Name" }, "permissions_name_unique")
                        .IsUnique()
                        .HasFilter("([name] IS NOT NULL)");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.PermissionRole", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("PermissionId", "RoleId")
                        .HasName("PK__permissi__32538CA726ADF750")
                        .IsClustered(false);

                    b.HasIndex(new[] { "RoleId" }, "permission_role_role_id_foreign");

                    b.ToTable("permission_role");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.PermissionUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<string>("UserType")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("user_type");

                    b.HasKey("UserId", "PermissionId", "UserType")
                        .HasName("PK__permissi__8CF2DCD5F6F7951D")
                        .IsClustered(false);

                    b.HasIndex(new[] { "PermissionId" }, "permission_user_permission_id_foreign");

                    b.ToTable("permission_user");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__roles__3213E83E6EF2660A")
                        .IsClustered(false);

                    b.HasIndex(new[] { "Name" }, "roles_name_unique")
                        .IsUnique()
                        .HasFilter("([name] IS NOT NULL)");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.RoleUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("UserType")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("user_type");

                    b.HasKey("UserId", "RoleId", "UserType")
                        .HasName("PK__role_use__E5C17B26B17CB5DE")
                        .IsClustered(false);

                    b.HasIndex(new[] { "RoleId" }, "role_user_role_id_foreign");

                    b.ToTable("role_user");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.SmsSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("NexmoFrom")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("nexmo_from")
                        .HasDefaultValueSql("('NEXMO')");

                    b.Property<string>("NexmoKey")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("nexmo_key");

                    b.Property<string>("NexmoSecret")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("nexmo_secret");

                    b.Property<string>("NexmoStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("nexmo_status")
                        .HasDefaultValueSql("('deactive')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__sms_sett__3213E83E87B6829B")
                        .IsClustered(false);

                    b.ToTable("sms_settings");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.SmtpSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("MailDriver")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("mail_driver");

                    b.Property<string>("MailEncryption")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasColumnName("mail_encryption");

                    b.Property<string>("MailFromEmail")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("mail_from_email");

                    b.Property<string>("MailFromName")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("mail_from_name");

                    b.Property<string>("MailHost")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("mail_host");

                    b.Property<string>("MailPassword")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("mail_password");

                    b.Property<string>("MailPort")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("mail_port");

                    b.Property<string>("MailUsername")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("mail_username");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("Verified")
                        .HasColumnType("int")
                        .HasColumnName("verified");

                    b.HasKey("Id")
                        .HasName("PK__smtp_set__3213E83E446D8695")
                        .IsClustered(false);

                    b.ToTable("smtp_settings");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.TaxSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<double>("Percent")
                        .HasColumnType("float")
                        .HasColumnName("percent");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('active')");

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("tax_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__tax_sett__3213E83E88380238")
                        .IsClustered(false);

                    b.ToTable("tax_settings");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.ThemeSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomCss")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("custom_css");

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("primary_color");

                    b.Property<string>("SecondaryColor")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("secondary_color");

                    b.Property<string>("SidebarBgColor")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("sidebar_bg_color");

                    b.Property<string>("SidebarTextColor")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("sidebar_text_color");

                    b.Property<string>("TopbarTextColor")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("topbar_text_color")
                        .HasDefaultValueSql("('#FFFFFF')");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__theme_se__3213E83E649A95FE")
                        .IsClustered(false);

                    b.ToTable("theme_settings");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.TodoItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("position");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(27)
                        .HasColumnType("nvarchar(27)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("('pending')");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PK__todo_ite__3213E83EA43012FD")
                        .IsClustered(false);

                    b.HasIndex(new[] { "UserId" }, "todo_items_user_id_foreign");

                    b.ToTable("todo_items");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.UniversalSearch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("RouteName")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("route_name");

                    b.Property<string>("SearchableId")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("searchable_id");

                    b.Property<string>("SearchableType")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("searchable_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__universa__3213E83EE3EDD18E")
                        .IsClustered(false);

                    b.ToTable("universal_searches");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CallingCode")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("calling_code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("group_id");

                    b.Property<string>("Image")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("image");

                    b.Property<string>("Mobile")
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("mobile");

                    b.Property<int>("MobileVerified")
                        .HasColumnType("int")
                        .HasColumnName("mobile_verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("nvarchar(191)")
                        .HasColumnName("password");

                    b.Property<string>("RememberToken")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("remember_token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("PK__users__3213E83ECB402F21")
                        .IsClustered(false);

                    b.HasIndex(new[] { "Email" }, "users_email_unique")
                        .IsUnique()
                        .HasFilter("([email] IS NOT NULL)");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Booking", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.Coupon", "Coupon")
                        .WithMany("Bookings")
                        .HasForeignKey("CouponId");

                    b.HasOne("UrbanStyleApi.Models.Deal", "Deal")
                        .WithMany("Bookings")
                        .HasForeignKey("DealId");

                    b.HasOne("UrbanStyleApi.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId");

                    b.Navigation("Coupon");

                    b.Navigation("Deal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.BookingItem", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.Booking", "Booking")
                        .WithMany("BookingItems")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UrbanStyleApi.Models.BusinessService", "BusinessService")
                        .WithMany("BookingItems")
                        .HasForeignKey("BusinessServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("BusinessService");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.BookingUser", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.Booking", "Booking")
                        .WithMany("BookingUsers")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UrbanStyleApi.Models.User", "User")
                        .WithMany("BookingUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.BusinessService", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.Category", "Category")
                        .WithMany("BusinessServices")
                        .HasForeignKey("CategoryId");

                    b.HasOne("UrbanStyleApi.Models.Location", "Location")
                        .WithMany("BusinessServices")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.BusinessServiceUser", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.BusinessService", "BusinessService")
                        .WithMany("BusinessServiceUsers")
                        .HasForeignKey("BusinessServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UrbanStyleApi.Models.User", "User")
                        .WithMany("BusinessServiceUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.CompanySetting", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.Currency", "Currency")
                        .WithMany("CompanySettings")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.CouponUser", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.Coupon", "Coupon")
                        .WithMany("CouponUsers")
                        .HasForeignKey("CouponId");

                    b.HasOne("UrbanStyleApi.Models.User", "User")
                        .WithMany("CouponUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.DealItem", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.BusinessService", "BusinessService")
                        .WithMany("DealItems")
                        .HasForeignKey("BusinessServiceId");

                    b.HasOne("UrbanStyleApi.Models.Deal", "Deal")
                        .WithMany("DealItems")
                        .HasForeignKey("DealId");

                    b.Navigation("BusinessService");

                    b.Navigation("Deal");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.EmployeeGroupService", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.BusinessService", "BusinessService")
                        .WithMany("EmployeeGroupServices")
                        .HasForeignKey("BusinessServiceId");

                    b.HasOne("UrbanStyleApi.Models.EmployeeGroup", "EmployeeGroups")
                        .WithMany("EmployeeGroupServices")
                        .HasForeignKey("EmployeeGroupsId");

                    b.Navigation("BusinessService");

                    b.Navigation("EmployeeGroups");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Payment", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.PermissionRole", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.Permission", "Permission")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UrbanStyleApi.Models.Role", "Role")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.PermissionUser", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.Permission", "Permission")
                        .WithMany("PermissionUsers")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.RoleUser", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.Role", "Role")
                        .WithMany("RoleUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.TodoItem", b =>
                {
                    b.HasOne("UrbanStyleApi.Models.User", "User")
                        .WithMany("TodoItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Booking", b =>
                {
                    b.Navigation("BookingItems");

                    b.Navigation("BookingUsers");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.BusinessService", b =>
                {
                    b.Navigation("BookingItems");

                    b.Navigation("BusinessServiceUsers");

                    b.Navigation("DealItems");

                    b.Navigation("EmployeeGroupServices");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Category", b =>
                {
                    b.Navigation("BusinessServices");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Coupon", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CouponUsers");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Currency", b =>
                {
                    b.Navigation("CompanySettings");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Deal", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("DealItems");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.EmployeeGroup", b =>
                {
                    b.Navigation("EmployeeGroupServices");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Location", b =>
                {
                    b.Navigation("BusinessServices");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Permission", b =>
                {
                    b.Navigation("PermissionRoles");

                    b.Navigation("PermissionUsers");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.Role", b =>
                {
                    b.Navigation("PermissionRoles");

                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("UrbanStyleApi.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("BookingUsers");

                    b.Navigation("BusinessServiceUsers");

                    b.Navigation("CouponUsers");

                    b.Navigation("TodoItems");
                });
#pragma warning restore 612, 618
        }
    }
}
